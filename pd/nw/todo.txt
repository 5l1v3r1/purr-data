Event settings for edit mode
----------------------------

1) No box - normal editmode behavior
   * moving/selecting
   * setting a bounding rect
   * mouse cannot select text
   * text is not editable
   * clicking a box triggers #2 below
2) Editing a box in place
  * x/y is set
   * can type inside box
   * can select text with the mouse
   * mouse motion doesn't change box position
   * applies to all boxes which already exist and are being edited
3) Editing a new box before it's anchored
   * x/y follows mouse
   * can type new text into the box
   * a click in the box will anchor the box and trigger #2 above

*need to be able to tell the difference between new obj and retexted
obj

HTML5 which may not be standard yet:
1) mouse.pageX/pageY -- exist in Chromium but maybe not in FF et al.
2) svg 'overflow' attribute -- probably doesn't work in other browsers
3) document.body.scrollTop (might be Chromium-specific, not sure)
4) document.body.scrollLeft (might be Chromium-specific, not sure)

Problems to put off until all (or most) sys_vgui calls are eliminated:
[x] gui-side parser inside -- pdgui.js
[ ] Semicolons -- currently the parser can't tell the difference between
    semicolons inside symbols and semicolons that end statements. Again,
    this will be easy to solve once we eliminate sys_gui altogether

Node-webkit stuff:
1) popup API
2) new window API
3) window menus
4) (probably) present working directory
5) command line argv

Everything else: (A [x] means we've fixed it)
[ ] packaging as app, setting correct appname, etc
[ ] get -unique to work (relied on tcl [send] command)
[ ] check if patch windows with screenposition (0,0) get stuck underneath
    Ubuntu/OSX menu.
[ ] Node-webkit has a "screen" interface to retrieve the "workable" area of the screen
[x] choosing the same directory multiple times doesn't work
    (see dialog API page)
[x] "Save As" on an overwrite doesn't seem to clear the dirty flag
[ ] figure out why there is a "pd_opendir" global var
[ ] pass k12 mode arg
[ ] implement recent files (using Pd's prefs loading mechanism instead of
    reimplementing gui prefs)
[ ] implement verifyquit
[ ] save and saveas dialogs aren't defaulting to the present working directory
[x] implement automatic scrollbars and svg canvas resizing
[x] add 'x' type to gui_vmess for saving canvas names, etc., as hex values
[x] destroy (or, more likely, hide) selection rectangle when not needed
[ ] change gui_text_select to gui_gobj_select
[ ] make it possible to have the inner cells of hradio change color with the
    selection, as the border currently does.  Tk just uses the non-hierarchical
    tags and appends the word "BASE".  (Maybe use an inner <g> to do this.)
[x] make mycnv use its own selection logic
[ ] abstract away appendChild
[ ] font-size should be set as css property for a class of text, rather than
    per each gobj in svg
[ ] remove the "fudge_factor" kludge in g_rtext.c, and handle fonts in a sane
    manner.  In doing so we must decide whether or not we want to be able to
    fetch the bounding box of objects from within a Pd patch.
    (Currently [canvasinfo] and [objectinfo] are the only objects that can
    do this, though there might also be)
[x] replace things like gui_select_color with css
[ ] find a better approach to escaping characters for the gui than
    escape_double_quotes kludge (and handle any other problematic chars)
[x] look into using <def> and <use> for scalars. (Looked into it-- doesn't
    seem necessary or helpful...)
[x] in draw_vis, make circle and ellipse radii attr floats instead of ints
[x] should stroke-dasharray values be floats? (Yes.)
[ ] once garrays are drawn inside a <g> we won't have to individually erase
    each child of a scalar
[ ] clean up svg_sendupdate -- put a single gui_vmess at the end
[ ] svg_sendupdate -- make sure there aren't arbitrary %d's that should actually be %g's
[x] svg_sendupdate -- need a gui interface for stuff like stroke-dasharray
    (and garrays)
[x] ibid., for path data, points
[ ] make pdgui function names more consistent
[ ] in draw_vis, move tags to front of function call so they don't have to
    be in an array
[ ] in draw_vis, remove all the coords logic and let svg_togui do that work.
    In svg_new, leverage the "d", "points", etc. methods to do the same.
[ ] remove the draw_vis warning/code about needing 2 points to draw
[ ] need to clean up dead windows inside patchwin object (on close)
[ ] make gui_menu_close filename less hacky (currently includes patch args in
    the middle) 
[ ] figure out why -nrt flag causes Pd to bail on the GUI (it wasn't doing this
    on the amd_64 virtual Jessie machine, nor on my 32-bit machine).
[ ] make dialogs with [yes/no] instead of [cancel/ok]
[ ] make a gui_mess interface for the edge cases that don't require args
    (similar to sys_gui)
[ ] make sure we're breaking down the socket properly from the GUI side on quit
[ ] looks like nwworkingdir isn't working for open/save dialogs atm
[ ] nwworkingdir only works on the second file open
[ ] implement the stuff at the end of saveas_callback (recentfiles et al)
[ ] make an "export" menu command for max patch saving.  That way we can accept
    a single extension for saving (.pd), and the native save dialog will warn
    us on potential file overwrites (even when the user neglects to type an
    extension).
[ ] draw graph inside gobj group
[ ] merge gui_text_select and gui_text_deselect
[ ] in function gui_cord_inspector_update, use parameter "moved" to flash text
[ ] cord_inspector_flash doesn't seem to be deterministic-- if you move among
    several cords very fast it will try to flash a non-existent svg item.
    (Probably want to either make a permanent item in the pdcanvas.html for it,
    or hard-code a separate div.)
[x] for data structure demos, change "" to 'none'
[ ] fix "Reselect" <ctrl-Enter> Keybinding.  It doesn't work atm because nw.js
    cannot bind to Enter. But canvas_events should make this pretty easy.
[ ] keyup doesn't register autokeypresses, but keyname and key do
[ ] text_set doesn't work when a numbox is first created (but works otherwise)
[ ] clean up nw_create_window (doesn't need so many parameters)
[x] make a nice window API in C.  Window "foo-bar" type maps to "foo-bar.html"
[ ] implement the crappy iemgui color dialog presets
[x] find a simple translation API
[ ] use underscores for iemgui dialog element names
[ ] revisit the x_thick logic in g_slider.c.  It thickens the indicator when
    it's in the middle of the slider, but it's pretty obscure in the current
    implementation.
[ ] for as many items as possible, hide them instead of removing from DOM
[ ] fix iemgui_font so it doesn't use tcl list syntax
[ ] change all the gui color char[MAXPDSTRING] junk to simple int, and do the
    conversion to hex html string in the gui.
[ ] implement iemgui labels and its ascetic font chooser
[ ] think about scaling the svg instead of the page, and making the selection
    rectangle a div above that
[ ] change 'visible-width' to 'cnv-width'
[ ] in dialog_iemgui.html, use an object to store all the prop/value pairs that
    got sent.  That way we don't have to use all those awful tricks to
    conditionally fill the slots
[ ] look into the font metrics, see if we can use floating point fonts to
    simplify things
[ ] iemgui font configuration -- de-tcl-ize the {fontface fontsize} tcl list,
    then make it work
[x] do msg box click animation in css
[x] tgl 'X' doesn't show up
[ ] gui_graph_fill_border: use css class selectors instead of configuration
[ ] standardize javascript function names
[x] in gui_plot_vis, we have to check for gobj existence.  For some reason, at
    very fast drawing rates we end up with two svg elements if we don't check
    for this.  This would be simplified if gop stuff was just children of
    parent <group>
[x] add garray_update for changing the path coords without having to recreate
    the entire scalar edifice
[ ] remove gui_text_select_color (css takes care of this)
[ ] add a canvas message to set a transform on the patchsvg.  Good for:
    * obscure display needs (zooming past the browser limits)
    * rotating for a display
    * transforming or scaling all scalars on a patch at once
    However: This will require more math on the mousemotion.
    So this should probably wait until
    moving a lot of the editing code out of C and into the GUI
[ ] change 'array_element_fill' to 'element_fill', array_outline to
    'array_element_outline' 
[ ] either nw_create_window should take fewer parameters or it should take an
    object with name: value pairs
[ ] getting the sense that glist_isselected should _always_ have
    glist_getcanvas(x) as its first parameter
[x] get rid of the old tcl specific sys_get_audio_apis
[x] have a single function to set t_svg_attr
[ ] t_svg: change x_x1..y2 to simple x_bbox[4], and change current x_bbox to
    x_cachebbox (or something like that)
[x] figure out why gatom_retext sends a fill color to GUI
[ ] look into changing 'x' format specifier from \"x%.6lx\" to more generic
    \"%.6lx\". (Not exactly sure what good the "x" does there.)  It's only
    specified in s_inter and in editor_new, so it should be easy to amend
    if need be.
[ ] make "rtext" textarea <div> static, and turn display on/off
[ ] what to do about character sets other than utf-8 that come from Pd
    side? Example: ISO-8859 from the string posted by hexloader.c
[ ] for the clipboard shortcut keys inside pd_canvas.html keydown, not sure
    what code should be sent to Pd on keyup...
[ ] revis message box after updating the text in the editor. We didn't have
    to do this with the old API because it updated the box on every keystroke.
    But we're doing an end-run around that entire edifice so we need to
    force it, probably inside text_setto
[ ] abstract out multi-line text loop, use for text_new and text_set
[ ] think about translating the undo/redo actions as they appear in the menu.
    (Might be tricky to do)
[ ] set svg viewBox/width/height to the window size when window gets created
[ ] revisit pdtk_check_scroll_on_motion.  It's not implemented in the port
    yet.  Perhaps there's a better way to do it, without triggering a bunch
    of layouts.
[ ] implement pdtk_canvas_editval and magicglassval
[ ] move crispEdges value to CSS
[ ] look into problems with object z-order on the C side when deleting objects
    and then undoing the delete
[ ] implement magicglass edit menu indicator
[ ] clip garray to gl_x1 and gl_x2 by:
    a) checking if we're in a gop, and
    b) if so, only render if element number is > gl_x1 and < gl_x2
[ ] fix bug where utf_8 snowmen in an object box can cause a buffer overflow
    in the lib loading routine
[ ] Fix layout on dialogs so that height/width of the document doesn't
    reflow when the window gets resized
[ ] ds-demos unit-circle node throws an "unexpected string" error when
    trying to open it
[ ] gui_canvas_getscroll isn't called upon patch load

Crashers
--------

***

Differences in Purr Data and Pd
---------------------------

When editing box content, you cannot currently trigger xlet highlight when
mousing over xlets.  This is a consequence of the current iteration of moving
gui behavior from the core to the GUI.

When editing box content, the text will wrap if it gets close to the right
border of the window.  (Probably same for the bottom of the window.) But
when you activate the box the svg text still gets rendered in the correct
location.  (I see this as an improvement over the old behavior.)
